package View;

import com.jrefinery.data.DefaultPieDataset;
import Controller.Controller;

import Model.Page;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import static java.lang.Thread.sleep;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.filechooser.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;


public class SimulationInterface extends javax.swing.JFrame {

    private Controller c = new Controller();
    private String path;
    
    public SimulationInterface() {
        this.path = "";
        initComponents();      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SIMULATION_PANEL = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MMU_OPTIMO_TBL = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        MMU_ALGORITMO_TBL = new javax.swing.JTable();
        MMU_OPTIMO_LBL = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        PROCESSES_OPT_TBL = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        PROCESSES_ALG_TBL = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        RAM_OPT_TBL = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        RAM_ALG_TBL = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        PAGES_OPT_TBL = new javax.swing.JTable();
        PAGES_OPT_LBL = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        PAGES_ALG_TBL = new javax.swing.JTable();
        PAGES_ALG_LBL = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        TRASHING_OPT_TBL = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        TRASHING_ALG_TBL = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        FRAGMENTATION_OPT_TBL = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        FRAGMENTATION_ALG_TBL = new javax.swing.JTable();
        PLAY_SIMULATION_BTN = new javax.swing.JButton();
        PAUSE_SIMULATION_BTN = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        algorithm_ComboBox = new javax.swing.JComboBox<>();
        MMU_OPTIMO_LBL1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        SIMULATION_PANEL.setBackground(new java.awt.Color(101, 139, 150));

        MMU_OPTIMO_TBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "PAGE ID", "PID", "LOADED", "L-ADDR", "M-ADDR", "D-ADDR", "LOADED-T", "MARK"
            }
        ));
        jScrollPane1.setViewportView(MMU_OPTIMO_TBL);

        MMU_ALGORITMO_TBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "PAGE ID", "PID", "LOADED", "L-ADDR", "M-ADDR", "D-ADDR", "LOADED-T", "MARK"
            }
        ));
        jScrollPane2.setViewportView(MMU_ALGORITMO_TBL);

        MMU_OPTIMO_LBL.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        MMU_OPTIMO_LBL.setText("MMU-ALG");

        PROCESSES_OPT_TBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "PROCESSES", "SIM-TIME"
            }
        ));
        jScrollPane3.setViewportView(PROCESSES_OPT_TBL);

        PROCESSES_ALG_TBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "PROCESSES", "SIM_TIME"
            }
        ));
        jScrollPane4.setViewportView(PROCESSES_ALG_TBL);

        RAM_OPT_TBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "RAM KB", "RAM %", "V-RAM KB", "V-RAM %"
            }
        ));
        jScrollPane5.setViewportView(RAM_OPT_TBL);

        RAM_ALG_TBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "RAM KB", "RAM %", "V-RAM KB", "V-RAM %"
            }
        ));
        jScrollPane6.setViewportView(RAM_ALG_TBL);

        PAGES_OPT_TBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "LOADED", "UNLOADED"
            }
        ));
        jScrollPane7.setViewportView(PAGES_OPT_TBL);

        PAGES_OPT_LBL.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        PAGES_OPT_LBL.setText("PAGES");

        PAGES_ALG_TBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "LOADED", "UNLOADED"
            }
        ));
        jScrollPane8.setViewportView(PAGES_ALG_TBL);

        PAGES_ALG_LBL.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        PAGES_ALG_LBL.setText("PAGES");

        TRASHING_OPT_TBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null}
            },
            new String [] {
                "TRASHING"
            }
        ));
        jScrollPane9.setViewportView(TRASHING_OPT_TBL);

        TRASHING_ALG_TBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null}
            },
            new String [] {
                "TRASHING"
            }
        ));
        jScrollPane10.setViewportView(TRASHING_ALG_TBL);

        FRAGMENTATION_OPT_TBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "FRAGMENTATION"
            }
        ));
        jScrollPane11.setViewportView(FRAGMENTATION_OPT_TBL);

        FRAGMENTATION_ALG_TBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "FRAGMENTATION"
            }
        ));
        jScrollPane12.setViewportView(FRAGMENTATION_ALG_TBL);

        PLAY_SIMULATION_BTN.setBackground(new java.awt.Color(51, 127, 149));
        PLAY_SIMULATION_BTN.setText("PLAY");
        PLAY_SIMULATION_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PLAY_SIMULATION_BTNActionPerformed(evt);
            }
        });

        PAUSE_SIMULATION_BTN.setBackground(new java.awt.Color(51, 127, 149));
        PAUSE_SIMULATION_BTN.setText("PAUSE");
        PAUSE_SIMULATION_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PAUSE_SIMULATION_BTNActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(51, 127, 149));
        jButton1.setText("READ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(51, 127, 149));
        jButton2.setText("GENERATE");

        algorithm_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FIFO", "Second Chance", "MRU", "Random" }));

        MMU_OPTIMO_LBL1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        MMU_OPTIMO_LBL1.setText("MMU-OPT");

        javax.swing.GroupLayout SIMULATION_PANELLayout = new javax.swing.GroupLayout(SIMULATION_PANEL);
        SIMULATION_PANEL.setLayout(SIMULATION_PANELLayout);
        SIMULATION_PANELLayout.setHorizontalGroup(
            SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SIMULATION_PANELLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SIMULATION_PANELLayout.createSequentialGroup()
                        .addComponent(PAGES_OPT_LBL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PAGES_ALG_LBL))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SIMULATION_PANELLayout.createSequentialGroup()
                        .addGroup(SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(SIMULATION_PANELLayout.createSequentialGroup()
                                    .addComponent(MMU_OPTIMO_LBL1)
                                    .addGap(159, 159, 159)
                                    .addComponent(jButton1))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(SIMULATION_PANELLayout.createSequentialGroup()
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SIMULATION_PANELLayout.createSequentialGroup()
                                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(206, 206, 206)
                                .addComponent(PLAY_SIMULATION_BTN)))
                        .addGap(98, 98, 98)
                        .addGroup(SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(SIMULATION_PANELLayout.createSequentialGroup()
                                    .addComponent(PAUSE_SIMULATION_BTN)
                                    .addGap(265, 265, 265)
                                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(SIMULATION_PANELLayout.createSequentialGroup()
                                    .addComponent(jButton2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(MMU_OPTIMO_LBL)
                                    .addGap(122, 122, 122)
                                    .addComponent(algorithm_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(SIMULATION_PANELLayout.createSequentialGroup()
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(SIMULATION_PANELLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        SIMULATION_PANELLayout.setVerticalGroup(
            SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SIMULATION_PANELLayout.createSequentialGroup()
                .addGroup(SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SIMULATION_PANELLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(MMU_OPTIMO_LBL1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SIMULATION_PANELLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(MMU_OPTIMO_LBL)
                            .addComponent(algorithm_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2))
                .addGap(20, 20, 20)
                .addGroup(SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SIMULATION_PANELLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(PAGES_OPT_LBL))
                    .addGroup(SIMULATION_PANELLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(PAGES_ALG_LBL)))
                .addGap(17, 17, 17)
                .addGroup(SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SIMULATION_PANELLayout.createSequentialGroup()
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PLAY_SIMULATION_BTN)
                            .addComponent(PAUSE_SIMULATION_BTN)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SIMULATION_PANELLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(SIMULATION_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(SIMULATION_PANELLayout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(46, 46, 46))
        );

        getContentPane().add(SIMULATION_PANEL, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 1240, 820));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PLAY_SIMULATION_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PLAY_SIMULATION_BTNActionPerformed
        c = new Controller();
        int alg = algorithm_ComboBox.getSelectedIndex() + 1;
        c.startComputers(alg);

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Page Id");
        modelo.addColumn("PID");
        modelo.addColumn("LOADED");
        modelo.addColumn("L-ADDR");
        modelo.addColumn("M-ADDR");
        modelo.addColumn("LOADED-T");
        modelo.addColumn("MARK");

        MMU_ALGORITMO_TBL.setModel(modelo);
        int pidColumnIndex = 1; // Índice de la columna "PID" en el modelo
        MMU_ALGORITMO_TBL.setDefaultRenderer(Object.class, new CustomTableCellRenderer(pidColumnIndex));

        

        DefaultTableModel modelo2 = new DefaultTableModel();
        modelo2.addColumn("PROCESSES");
        modelo2.addColumn("SIM TIME");
        PROCESSES_ALG_TBL.setModel(modelo2);
        
        
        DefaultTableModel modelo3 = new DefaultTableModel();
        modelo3.addColumn("THRASHING");
        
        TRASHING_ALG_TBL.setModel(modelo3);
        
        DefaultTableModel modelo4 = new DefaultTableModel();
        modelo4.addColumn("RAM KB");
        modelo4.addColumn("RAM %");
        modelo4.addColumn("VRAM KB");
        modelo4.addColumn("VRAM %");
        RAM_ALG_TBL.setModel(modelo4);
        
        DefaultTableModel modeloPROCESSES_OPT = new DefaultTableModel();
        modeloPROCESSES_OPT.addColumn("PROCESSES");
        modeloPROCESSES_OPT.addColumn("SIM TIME");
        PROCESSES_OPT_TBL.setModel(modeloPROCESSES_OPT);
        
        DefaultTableModel modeloTRASHING_OPT = new DefaultTableModel();
        modelo3.addColumn("THRASHING");
        TRASHING_OPT_TBL.setModel(modeloTRASHING_OPT);
        
        DefaultTableModel modeloRAM_OPT = new DefaultTableModel();
        modeloRAM_OPT.addColumn("RAM KB");
        modeloRAM_OPT.addColumn("RAM %");
        modeloRAM_OPT.addColumn("VRAM KB");
        modeloRAM_OPT.addColumn("VRAM %");
        RAM_OPT_TBL.setModel(modeloRAM_OPT);
        
        
        ///////
        
        File file = new File(this.path);
        ArrayList<String[]> memoryRows = null;
        Object[] objectArray = null;
        
        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            String st;
            String pid = "";
            String size = "";
            String ptr = "";
            String[] res;         
            while ((st = br.readLine()) != null && this.c.isPaused() != false) {
                memoryRows = this.c.readInstructions(st);
            }
     
            List<Object[]> objectList = new ArrayList<>();
            
            for (String[] strings: memoryRows) {
                objectArray = new Object[strings.length];
            for (int i = 0; i < strings.length; i++) {
                objectArray[i] = strings[i]; // Asignar cada String al correspondiente índice en Object[]
            }
            objectList.add(objectArray); // Agregar el Object[] convertido a la lista de objetos
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(SimulationInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SimulationInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(SimulationInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
            

        /*TableUpdateWorker worker1 = new TableUpdateWorker(modelo, MMU_ALGORITMO_TBL, objectArray);
        worker1.execute();*/
        
        TableUpdateWorker worker2 = new TableUpdateWorker(modelo2, MMU_OPTIMO_TBL, this.c.getAmountProcesses());
        worker2.execute();
        
        TableUpdateWorker worker3 = new TableUpdateWorker(modelo3, TRASHING_ALG_TBL, this.c.getAmountThrashing());
        worker3.execute();
        
        TableUpdateWorker worker4 = new TableUpdateWorker(modelo4, RAM_ALG_TBL, this.c.getVRAM());
        worker4.execute();
        
        TableUpdateWorker workerPROCESSES_OPT = new TableUpdateWorker(modeloPROCESSES_OPT, PROCESSES_OPT_TBL, this.c.getAmountProcesses2());
        workerPROCESSES_OPT.execute();
        
        TableUpdateWorker workerTRASHING_OPT = new TableUpdateWorker(modeloTRASHING_OPT, TRASHING_OPT_TBL, this.c.getAmountThrashing2());
        workerTRASHING_OPT.execute();
        
        TableUpdateWorker workerRAM_OPT = new TableUpdateWorker(modeloRAM_OPT, RAM_OPT_TBL, this.c.getVRAM2());
        workerRAM_OPT.execute();
        
        FileReadWorker worker = new FileReadWorker(this.path, modelo, c); // Pasar la instancia de Controller como parámetro
        worker.execute();

    }//GEN-LAST:event_PLAY_SIMULATION_BTNActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        //j.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        
        fileChooser.setVisible(true);
        fileChooser.showOpenDialog(fileChooser);
        
        this.path = fileChooser.getSelectedFile().getAbsolutePath();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void PAUSE_SIMULATION_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PAUSE_SIMULATION_BTNActionPerformed
       this.c.setPause(true);
    }//GEN-LAST:event_PAUSE_SIMULATION_BTNActionPerformed

     public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphicsInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphicsInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphicsInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphicsInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimulationInterface().setVisible(true);
            }
        });
    }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable FRAGMENTATION_ALG_TBL;
    private javax.swing.JTable FRAGMENTATION_OPT_TBL;
    private javax.swing.JTable MMU_ALGORITMO_TBL;
    private javax.swing.JLabel MMU_OPTIMO_LBL;
    private javax.swing.JLabel MMU_OPTIMO_LBL1;
    private javax.swing.JTable MMU_OPTIMO_TBL;
    private javax.swing.JLabel PAGES_ALG_LBL;
    private javax.swing.JTable PAGES_ALG_TBL;
    private javax.swing.JLabel PAGES_OPT_LBL;
    private javax.swing.JTable PAGES_OPT_TBL;
    private javax.swing.JButton PAUSE_SIMULATION_BTN;
    private javax.swing.JButton PLAY_SIMULATION_BTN;
    private javax.swing.JTable PROCESSES_ALG_TBL;
    private javax.swing.JTable PROCESSES_OPT_TBL;
    private javax.swing.JTable RAM_ALG_TBL;
    private javax.swing.JTable RAM_OPT_TBL;
    private javax.swing.JPanel SIMULATION_PANEL;
    private javax.swing.JTable TRASHING_ALG_TBL;
    private javax.swing.JTable TRASHING_OPT_TBL;
    private javax.swing.JComboBox<String> algorithm_ComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    // End of variables declaration//GEN-END:variables
}
